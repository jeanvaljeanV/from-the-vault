# -*- coding: utf-8 -*-
"""Monte Carlo Basic Pricing Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ttD416TGlkS_U8DXzDclWwwYCSXIHTpL
"""

import numpy as np
import matplotlib.pyplot as plt

class MonteCarloOptionPricerGenerator:
    """
    Simulador de precificação Monte Carlo para Opções de Call e Puts Europeias
    """

    def __init__(self, stock_price=27.41, strike_price=29.00,
                 risk_free_rate=0.05, volatility=0.35,
                 time_to_maturity=0.25, num_simulations=10000):
        """
        Inicializa os parâmetros da simulação:
        stock_price: Preço atual do ativo (S0)
        strike_price: Preço de exercício da opção (K)
        risk_free_rate: Taxa livre de risco anual (r)
        volatility: Volatilidade anual (σ)
        time_to_maturity: Tempo para o vencimento da opção (T)
        num_simulations: Número de simulações a serem realizadas
        """
        # Parâmetros atribuídos (note: consistent naming)
        self.S0 = stock_price  # Capitalized S0 for consistency
        self.K = strike_price  # Capitalized K for consistency
        self.r = risk_free_rate
        self.sigma = volatility
        self.T = time_to_maturity
        self.num_simulations = num_simulations  # Original name
        self.n = num_simulations  # Short alias for convenience

        # Preços das simulações salvos
        self.simulated_prices = None

    def generate_stock_paths(self):
        """
        Gerar preços de ativos usando movimento browniano
        Formula: S_T = S0 * exp( (r - 0.5*σ²)*T + σ*√T*Z )
        where Z ~ Normal(0,1)
        """
        # Gerar valores aleatórios (Valor Z)
        random_numbers = np.random.standard_normal(self.n)  # Use self.n alias

        # Calcular o expoente para o MB
        exponent = (self.r - 0.5*self.sigma**2)*self.T
        exponent += self.sigma*np.sqrt(self.T)*random_numbers

        # Preços finais dos ativos
        self.simulated_prices = self.S0 * np.exp(exponent)
        return self.simulated_prices

    def price_call_option(self):
        """
        Calcular o preço de uma opção de compra européia
        Payoff = max(S_T - K, 0)
        """
        # Gerar caminhos caso não tenham sido criados
        if self.simulated_prices is None:
            self.generate_stock_paths()

        # Calcular o payoff para cada caminho
        payoffs = np.maximum(self.simulated_prices - self.K, 0)

        # Desconto do payoff para valor presente e média
        option_price = np.exp(-self.r*self.T)*np.mean(payoffs)
        return option_price

    def price_put_option(self):  # FIXED INDENTATION
        """
        Calcular o preço de uma opção de venda européia
        Payoff = max(K - S_T, 0)
        """
        if self.simulated_prices is None:  # Removed erroneous dot
            self.generate_stock_paths()

        payoffs = np.maximum(self.K - self.simulated_prices, 0)
        option_price = np.exp(-self.r*self.T)*np.mean(payoffs)
        return option_price

    def visualize_simulation(self, num_paths=50):
        """
        Visualizar distribuição dos preços finais
        (Não podemos plotar caminhos pois só temos preço final)
        """
        if self.simulated_prices is None:
            self.generate_stock_paths()

        plt.figure(figsize=(10, 6))

        # Plot histogram instead of paths
        plt.hist(self.simulated_prices, bins=50, alpha=0.75)
        plt.axvline(self.K, color='r', linestyle='--', label=f'Strike Price (${self.K})')
        plt.title(f'Distribuição de Preços Finais (n={self.n})')
        plt.xlabel('Preço do Ativo no Vencimento')
        plt.ylabel('Frequência')
        plt.legend()
        plt.grid(True)
        plt.show()

# ================
# TESTAR O CÓDIGO
# ================
if __name__ == "__main__":
    # Create pricer instance
    pricer = MonteCarloOptionPricerGenerator()

    # Generate paths and price options
    call_price = pricer.price_call_option()
    put_price = pricer.price_put_option()

    print(f"Preço da Opção de Compra Europeia: ${call_price:.2f}")
    print(f"Preço da Opção de Venda Europeia: ${put_price:.2f}")

    # Visualize the distribution
    pricer.visualize_simulation()